MERN

M : mongodb databse.
    Mongodb is a no sql database 
    in mongo db the following herichery is followed : database = many collection, collection = many documents, document = many objects

    models Folder:
        in this folder we specify schema.
        A schema defines the structure and format of the data that is stored for an identity, including the types of attributes (like name, email, phone number, etc.).
    
    config Folder:
    it is used to connect to mongodb server.


E : Express : it is a framework 

    Setting up a basic express application:
        We need to first download the express package from npm website.
        Then copy the boiler plate code from the same webpage and run it using node or nodemon so that you not need to stop and restart the server again and again.

        const express = require("express");
        cosnt app = express();

        express is just like the box of tools adn the app is the utility by which we can use these tools.


    Routing:
        It is a simaple step of specifying the address of the page
        the part of url till (.com) is called the domain name and after that the url is Routing
        if we don't use express then in http we have to use if, else statement to specify routes using the req.url keyword which return the url of the req.

    Middleware:
        Middleware is a function that executes between receiving a request on the server and sending it to the route handler.
        It perform tasks such as authentication, logging, modifying requests/responses, and error handling before the final response is sent. examlpe wen the user provide the partial info then the middleware is used to fills the incomplete info.
        There are three types of middleware:
            custom
            builtin
            third party
        All these middleware run for all the routes

        Custom middleware:
            app.use(req,res,next){
                console.log(this is a middleware);
                return next;
            } 
        Third party Middleware:
            const middlewareName = require("middlewareName");
            app.use(middlewareName());
        builtinMiddleware:

        To make a route specific middleware then declare it in the route itself:
            app.get("/", (req, res, next){
                    // middleware
                }, (req, res)=>{
                // route code
            });

    Function	    Purpose	                        Example Usage
    app.use()	    Registers middleware	        app.use(express.json());
    app.get()	    Defines a GET route handler	    app.get('/about', (req, res) => {...});
    app.listen()	Starts the Express server	    app.listen(3000, () => {...});
    app.post()      Hide data url 

    post method is used to take data from the client to server and get method is used to take data from server to client

    Cookie-parser install: npm i cookie-parser

    Session: 
        When we execute a task on web then after the particular task the browser forget our identity and then we have to login again for the tasks. so to make the tasks of login one time session is used
        It is the time between the login and logout from a website.

    Cache: 
        It is a memory location which is present iin the browser and browser ue it to do tasks like keeping the user logined and user authentication, etc. Its size is very small in size. every internet user has a chache memory

    Feature	Session	Cache
        Purpose	        Stores user-specific data temporarily	        Stores frequently used data for quick access
        Location	    Stored on the server	                        Stored in the browser or server
        Persistence	    Exists until logout or timeout	                Can persist even after closing the browser
        Example         Use	Keeping users logged in during a session	Storing CSS files, images, API responses
    
    What is a Session ID?
        A session ID is a unique identifier assigned to a user's session when they log in.
        It is stored on the client-side (usually in cookies) and sent with each request to the server.
        The server validates the session ID to check if the user is authenticated and retrieve their session data.
        It helps maintain user login state without requiring the user to log in again for every request.
        
        How it Works:
            User logs in → Server creates a session and generates a session ID.
            Session ID is stored in a cookie and sent to the client.
            On each request, the session ID is sent to the server.
            Server validates the session ID → If valid, the user remains logged in.

    Converting the blob into readable data:
        when we send data to the server the data get converted into blob(unreadable data format). to make this data readable again we use the following code:
            app.use(express.json()); // it convert the data from json to readable format.
            app.use(express.urlencoded({extended : true})); // it is used Converts form data into a JavaScript object (req.body).
    
    Lecture 6:
        create a npm project
            npm init -y =========these will create a file package.json which will be having info about the project.
        initialise express
            npm i express ============= these will install the dependirs and functionaloties if express.
            
        We will be learning how to setup parse for form
            The above two lines of code
        Setting up ejs for ejs files
            install ejs from npm
            setup ejs as view engine;
            ejs is basically the front end of our project
        setting up public static files
            app.use(express.static(path.join(__dirname,"Public")));
            the above line will set the middleware for thestatic file and then it will open static file from the public folder.
            If the file in main folder and public folder ar of same name then the priority is given to the file in public folder if the line code is enabled
            app.get("/", (req, res) => {
                res.render("index");
            }); this will render the index.html from public folder
            app.get("/ejs", (req, res) => {
                res.render("index.ejs");
            }); this will render index.ejs from the views folder
            while linking public files in ejs we do not include public in path of the file
            

        Dynamic Routing:
            Dynamic Routing : we can see the same routing path for multiple route this is called dynamic  routing.

            How to get frontend data to backend route
            Setup the dynamic routes by express:
                url ko route pr create kro
                res bhejo then
                ab analyse kro url ka konsa part dynamic h then uske age : lga do

            
        
    Lecture 7:
        run npm init -y 
        create the index.js file as it the main file in our package.json
        now install express from node - npm i express
        to start the server:You'll need to add the start script with nodemon in every new project you create. It's not automatically present in every project. Here's why and how to handle it:
        
        how to use the files from view, public folder
        the view folder files are send as response by res.render
        Cannot find module 'ejs' error arise then install the ejs module npm install ejs
        the string, html, object are send as response by the help of res.send
        the files from the public folder can be directly used in html in index.ejs file    
            
    Form Handling:
        make a form in html file
        now make to method = post
        three attributes are mandatory type, name, placeholder. name is used to take the data to the server with the variable name
        now in action feild paste the route to which you want to redirect the user after the submit button


R : React : conponents based app

N : node:
    Node.js is a JavaScript runtime environment that runs JavaScript code outside the browser using the V8 engine, which compiles JavaScript into machine code (not C++). Node.js extends JavaScript by providing built-in C++-based APIs to interact with the file system, network, and other system resources, enabling server-side development.
    The reason you cannot run this file in a browser like normal JavaScript is because your code uses the Node.js fs (File System) module, which is not available in the browser environment. Here’s why:
    Node get Function:
        ✔ app.get() handles GET requests.
        ✔ The first parameter ('/', '/about') is the route path.
        ✔ The second parameter is a function (req, res) that sends a response.
        ✔ You must start the server using node server.js.
    Nodemon package: 
        it is a package which restart the server on its own by saving the changes so that we not need to close and start the server again and again


Difference between a framework and library:

A library is a collection of pre-written code that provides specific functionality, which developers can use in their programs as needed.
A framework is a complete structure that provides a foundation for developing applications, enforcing rules and patterns that developers must follow.





Backend OneShot:

    In express the main thisng is package.json and package.json.lock and other things can be reinstalled.
    Making a Server:
        first we have to require the package https and then have to call it as function.
        But we should have to download the package before reuiring it, But the https package is already installed in the foleder with the node modules.
        We use express to make the server as it is production grade framework.